/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "protocol/gen-cpp2/calc_types.h"

#include <thrift/lib/cpp2/gen/module_types_tcc.h>


namespace apache {
namespace thrift {
namespace detail {

template <>
struct TccStructTraits<::fbthrift::calc::cpp2::AddRequest> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};
template <>
struct TccStructTraits<::fbthrift::calc::cpp2::AddResponse> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};

} // namespace detail
} // namespace thrift
} // namespace apache

namespace fbthrift { namespace calc { namespace cpp2 {

template <class Protocol_>
void AddRequest::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_num1:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::fbthrift::calc::cpp2::MyInteger>::readWithContext(*iprot, this->num1, _readState);
    this->__isset.num1 = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_num2:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::fbthrift::calc::cpp2::MyInteger>::readWithContext(*iprot, this->num2, _readState);
    this->__isset.num2 = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<AddRequest>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I32))) {
        goto _readField_num1;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I32))) {
        goto _readField_num2;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t AddRequest::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("AddRequest");
  xfer += prot_->serializedFieldSize("num1", apache::thrift::protocol::T_I32, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::fbthrift::calc::cpp2::MyInteger>::serializedSize<false>(*prot_, this->num1);
  xfer += prot_->serializedFieldSize("num2", apache::thrift::protocol::T_I32, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::fbthrift::calc::cpp2::MyInteger>::serializedSize<false>(*prot_, this->num2);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t AddRequest::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("AddRequest");
  xfer += prot_->serializedFieldSize("num1", apache::thrift::protocol::T_I32, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::fbthrift::calc::cpp2::MyInteger>::serializedSize<false>(*prot_, this->num1);
  xfer += prot_->serializedFieldSize("num2", apache::thrift::protocol::T_I32, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::fbthrift::calc::cpp2::MyInteger>::serializedSize<false>(*prot_, this->num2);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t AddRequest::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("AddRequest");
  xfer += prot_->writeFieldBegin("num1", apache::thrift::protocol::T_I32, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::fbthrift::calc::cpp2::MyInteger>::write(*prot_, this->num1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("num2", apache::thrift::protocol::T_I32, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::fbthrift::calc::cpp2::MyInteger>::write(*prot_, this->num2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void AddRequest::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t AddRequest::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t AddRequest::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t AddRequest::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void AddRequest::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t AddRequest::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t AddRequest::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t AddRequest::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // fbthrift::calc::cpp2
namespace fbthrift { namespace calc { namespace cpp2 {

template <class Protocol_>
void AddResponse::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_code:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::fbthrift::calc::cpp2::Code>::readWithContext(*iprot, this->code, _readState);
    this->__isset.code = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_msg:
  {
    
    iprot->readString(this->msg);
    this->__isset.msg = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          3,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_ret:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::fbthrift::calc::cpp2::MyInteger>::readWithContext(*iprot, this->ret, _readState);
    this->__isset.ret = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          3,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<AddResponse>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I32))) {
        goto _readField_code;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRING))) {
        goto _readField_msg;
      } else {
        goto _skip;
      }
    }
    case 3:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I32))) {
        goto _readField_ret;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t AddResponse::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("AddResponse");
  xfer += prot_->serializedFieldSize("code", apache::thrift::protocol::T_I32, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::fbthrift::calc::cpp2::Code>::serializedSize<false>(*prot_, this->code);
  xfer += prot_->serializedFieldSize("msg", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->msg);
  xfer += prot_->serializedFieldSize("ret", apache::thrift::protocol::T_I32, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::fbthrift::calc::cpp2::MyInteger>::serializedSize<false>(*prot_, this->ret);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t AddResponse::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("AddResponse");
  xfer += prot_->serializedFieldSize("code", apache::thrift::protocol::T_I32, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::fbthrift::calc::cpp2::Code>::serializedSize<false>(*prot_, this->code);
  xfer += prot_->serializedFieldSize("msg", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->msg);
  xfer += prot_->serializedFieldSize("ret", apache::thrift::protocol::T_I32, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::fbthrift::calc::cpp2::MyInteger>::serializedSize<false>(*prot_, this->ret);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t AddResponse::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("AddResponse");
  xfer += prot_->writeFieldBegin("code", apache::thrift::protocol::T_I32, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::fbthrift::calc::cpp2::Code>::write(*prot_, this->code);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("msg", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->writeString(this->msg);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("ret", apache::thrift::protocol::T_I32, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::fbthrift::calc::cpp2::MyInteger>::write(*prot_, this->ret);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void AddResponse::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t AddResponse::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t AddResponse::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t AddResponse::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void AddResponse::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t AddResponse::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t AddResponse::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t AddResponse::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // fbthrift::calc::cpp2
