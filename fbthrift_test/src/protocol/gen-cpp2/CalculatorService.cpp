/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "protocol/gen-cpp2/CalculatorService.h"
#include "protocol/gen-cpp2/CalculatorService.tcc"
#include "protocol/gen-cpp2/calc_metadata.h"
#include <thrift/lib/cpp2/gen/service_cpp.h>

namespace fbthrift { namespace calc { namespace cpp2 {
std::unique_ptr<apache::thrift::AsyncProcessor> CalculatorServiceSvIf::getProcessor() {
  return std::make_unique<CalculatorServiceAsyncProcessor>(this);
}


void CalculatorServiceSvIf::add( ::fbthrift::calc::cpp2::AddResponse& /*_return*/, std::unique_ptr< ::fbthrift::calc::cpp2::AddRequest> /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("add");
}

folly::SemiFuture<std::unique_ptr< ::fbthrift::calc::cpp2::AddResponse>> CalculatorServiceSvIf::semifuture_add(std::unique_ptr< ::fbthrift::calc::cpp2::AddRequest> req) {
  return apache::thrift::detail::si::semifuture_returning_uptr([&]( ::fbthrift::calc::cpp2::AddResponse& _return) { add(_return, std::move(req)); });
}

folly::Future<std::unique_ptr< ::fbthrift::calc::cpp2::AddResponse>> CalculatorServiceSvIf::future_add(std::unique_ptr< ::fbthrift::calc::cpp2::AddRequest> req) {
  return apache::thrift::detail::si::future(semifuture_add(std::move(req)), getThreadManager());
}


void CalculatorServiceSvIf::async_tm_add(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::fbthrift::calc::cpp2::AddResponse>>> callback, std::unique_ptr< ::fbthrift::calc::cpp2::AddRequest> req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] { return future_add(std::move(req)); });
}


void CalculatorServiceSvNull::add( ::fbthrift::calc::cpp2::AddResponse& /*_return*/, std::unique_ptr< ::fbthrift::calc::cpp2::AddRequest> /*req*/) {}

const char* CalculatorServiceAsyncProcessor::getServiceName() {
  return "CalculatorService";
}

void CalculatorServiceAsyncProcessor::getServiceMetadata(apache::thrift::metadata::ThriftServiceMetadataResponse& response) {
  ::apache::thrift::detail::md::ServiceMetadata<CalculatorServiceSvIf>::gen(response.metadata, response.context);
}

void CalculatorServiceAsyncProcessor::process(apache::thrift::ResponseChannelRequest::UniquePtr req, std::unique_ptr<folly::IOBuf> buf, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  apache::thrift::detail::ap::process(this, std::move(req), std::move(buf), protType, context, eb, tm);
}

bool CalculatorServiceAsyncProcessor::isOnewayMethod(const folly::IOBuf* buf, const apache::thrift::transport::THeader* header) {
  return apache::thrift::detail::ap::is_oneway_method(buf, header, onewayMethods_);
}

std::shared_ptr<folly::RequestContext> CalculatorServiceAsyncProcessor::getBaseContextForRequest() {
  return iface_->getBaseContextForRequest();
}

std::unordered_set<std::string> CalculatorServiceAsyncProcessor::onewayMethods_ {};
const CalculatorServiceAsyncProcessor::ProcessMap& CalculatorServiceAsyncProcessor::getBinaryProtocolProcessMap() {
  return binaryProcessMap_;
}

const CalculatorServiceAsyncProcessor::ProcessMap CalculatorServiceAsyncProcessor::binaryProcessMap_ {
  {"add", &CalculatorServiceAsyncProcessor::_processInThread_add<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
};

const CalculatorServiceAsyncProcessor::ProcessMap& CalculatorServiceAsyncProcessor::getCompactProtocolProcessMap() {
  return compactProcessMap_;
}

const CalculatorServiceAsyncProcessor::ProcessMap CalculatorServiceAsyncProcessor::compactProcessMap_ {
  {"add", &CalculatorServiceAsyncProcessor::_processInThread_add<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
};

}}} // fbthrift::calc::cpp2
