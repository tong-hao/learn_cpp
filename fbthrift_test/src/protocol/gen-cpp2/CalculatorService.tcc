/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "protocol/gen-cpp2/CalculatorService.h"

#include <thrift/lib/cpp2/gen/service_tcc.h>

namespace fbthrift { namespace calc { namespace cpp2 {
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRUCT,  ::fbthrift::calc::cpp2::AddRequest*>> CalculatorService_add_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, apache::thrift::protocol::T_STRUCT,  ::fbthrift::calc::cpp2::AddResponse*>> CalculatorService_add_presult;
template <typename ProtocolIn_, typename ProtocolOut_>
void CalculatorServiceAsyncProcessor::_processInThread_add(apache::thrift::ResponseChannelRequest::UniquePtr req, std::unique_ptr<folly::IOBuf> buf, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  auto pri = iface_->getRequestPriority(ctx, apache::thrift::concurrency::NORMAL);
  processInThread<ProtocolIn_, ProtocolOut_>(std::move(req), std::move(buf), ctx, eb, tm, pri, apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE, &CalculatorServiceAsyncProcessor::process_add<ProtocolIn_, ProtocolOut_>, this);
}
template <typename ProtocolIn_, typename ProtocolOut_>
void CalculatorServiceAsyncProcessor::process_add(apache::thrift::ResponseChannelRequest::UniquePtr req, std::unique_ptr<folly::IOBuf> buf, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  // make sure getConnectionContext is null
  // so async calls don't accidentally use it
  iface_->setConnectionContext(nullptr);
  CalculatorService_add_pargs args;
  auto uarg_req = std::make_unique< ::fbthrift::calc::cpp2::AddRequest>();
  args.get<0>().value = uarg_req.get();
  std::unique_ptr<apache::thrift::ContextStack> ctxStack(this->getContextStack(this->getServiceName(), "CalculatorService.add", ctx));
  try {
    folly::io::Cursor cursor(buf.get());
    cursor.skip(ctx->getMessageBeginSize());
    ProtocolIn_ iprot;
    iprot.setInput(cursor);
    deserializeRequest(args, buf.get(), &iprot, ctxStack.get());
  }
  catch (const std::exception& ex) {
    apache::thrift::detail::ap::process_handle_exn_deserialization<ProtocolOut_>(
        ex, std::move(req), ctx, eb, "add");
    return;
  }
  req->setStartedProcessing();
  auto callback = std::make_unique<apache::thrift::HandlerCallback<std::unique_ptr< ::fbthrift::calc::cpp2::AddResponse>>>(std::move(req), std::move(ctxStack), return_add<ProtocolIn_,ProtocolOut_>, throw_wrapped_add<ProtocolIn_, ProtocolOut_>, ctx->getProtoSeqId(), eb, tm, ctx);
  if (!callback->isRequestActive()) {
    callback.release()->deleteInThread();
    return;
  }
  ctx->setStartedProcessing();
  iface_->async_tm_add(std::move(callback), std::move(uarg_req));
}

template <class ProtocolIn_, class ProtocolOut_>
folly::IOBufQueue CalculatorServiceAsyncProcessor::return_add(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::fbthrift::calc::cpp2::AddResponse const& _return) {
  ProtocolOut_ prot;
  CalculatorService_add_presult result;
  result.get<0>().value = const_cast< ::fbthrift::calc::cpp2::AddResponse*>(&_return);
  result.setIsSet(0, true);
  return serializeResponse("add", &prot, protoSeqId, ctx, result);
}

template <class ProtocolIn_, class ProtocolOut_>
void CalculatorServiceAsyncProcessor::throw_wrapped_add(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  {
    (void)protoSeqId;
    apache::thrift::detail::ap::process_throw_wrapped_handler_error<ProtocolOut_>(
        ew, std::move(req), reqCtx, ctx, "add");
    return;
  }
}

}}} // fbthrift::calc::cpp2
